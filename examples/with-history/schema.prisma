// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String    @id @default(cuid())
  name                    String    @default("")
  email                   String    @unique @default("")
  password                String
  posts                   Post[]    @relation("Post_author")
  updatedAt               DateTime? @updatedAt
  createdAt               DateTime? @default(now())
  updatedBy               User?     @relation("User_updatedBy", fields: [updatedById], references: [id])
  updatedById             String?   @map("updatedBy")
  createdBy               User?     @relation("User_createdBy", fields: [createdById], references: [id])
  createdById             String?   @map("createdBy")
  from_User_updatedBy     User[]    @relation("User_updatedBy")
  from_User_createdBy     User[]    @relation("User_createdBy")
  from_Tag_updatedBy      Tag[]     @relation("Tag_updatedBy")
  from_Tag_createdBy      Tag[]     @relation("Tag_createdBy")
  from_PostLog_modifiedBy PostLog[] @relation("PostLog_modifiedBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Post {
  id          String    @id @default(cuid())
  title       String    @default("")
  status      String?
  content     Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate DateTime?
  author      User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId    String?   @map("author")
  tags        Tag[]     @relation("Tag_posts")

  @@index([authorId])
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @default("")
  posts       Post?     @relation("Tag_posts", fields: [postsId], references: [id])
  postsId     String?   @map("posts")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([postsId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model PostLog {
  id           String    @id @default(cuid())
  list         String    @default("")
  itemId       String    @default("")
  version      Int       @default(autoincrement())
  field        String    @default("")
  oldValue     String    @default("")
  newValue     String    @default("")
  modifiedBy   User?     @relation("PostLog_modifiedBy", fields: [modifiedById], references: [id])
  modifiedById String?   @map("modifiedBy")
  snapshot     Json?
  modifiedAt   DateTime? @default(now())

  @@index([modifiedById])
}
